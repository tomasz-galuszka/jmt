{"version":3,"sources":["getWeb3.js","service/kyc.service.js","components/kyc.component.js","service/matcha-token.service.js","components/account-details.component.js","service/matcha-token-sale.service.js","components/token-sale-details.component.js","components/token-buy.component.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","KYCSservice","initialize","eth","getAccounts","accounts","net","getId","networkId","contractInstance","Contract","KYCContract","abi","networks","address","addAddress","userAccount","methods","setCompleted","send","from","this","KycComponent","props","componentDidMount","service","setState","prevState","handleAddKYC","state","kycAddress","handleInputChange","event","target","value","className","type","name","onChange","onClick","Component","MatchaTokenService","MatchaTokenContract","getMoneyBalance","getBalance","balance","result","utils","fromWei","getTokenBalance","balanceOf","call","getTotalTokenSupply","totalSupply","subscribeTokenTransferEvent","onTransfer","events","Transfer","to","on","AccountDetailsComponent","subscribeTransferEvents","balanceToken","balanceMoney","MatchaTokenSaleService","MatchaTokenSaleContract","getAddress","buyTokens","toWei","getWalletAddres","wallet","getWalletMoneyBalance","walletAddress","TokenSaleDetailsComponent","serviceToken","getWalletAddress","getTokenTotalSupply","getWalletBalance","userAddress","balanceWallet","addressWallet","TokenBuyComponent","handleBuyTokens","App","loaded","alert","error","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89565e3d.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import KYCContract from \"../contracts/KYCContract.json\"\n\nexport class KYCSservice {\n\n  constructor(web3) {\n    this.web3 = web3\n  }\n\n  initialize = async () => {\n    this.accounts = await this.web3.eth.getAccounts()\n    this.networkId = await this.web3.eth.net.getId()\n    this.contractInstance = new this.web3.eth.Contract(\n      KYCContract.abi,\n      KYCContract.networks[this.networkId] && KYCContract.networks[this.networkId].address\n    )\n    return this\n  }\n\n  addAddress = async (userAccount, address) => {\n    console.log(`KYC for ${address} adding from user account ${userAccount} ...`)\n\n    await this.contractInstance.methods\n      .setCompleted(address)\n      .send({ from: userAccount})\n\n    console.log(`KYC for ${address} is completed`)\n  }\n  \n}","import React, { Component } from \"react\"\nimport { KYCSservice } from \"../service/kyc.service\"\n\nexport class KycComponent extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      kycAddress: '0x123....',\n    }\n  }\n\n  componentDidMount = async () => {\n    this.service = await new KYCSservice(this.props.web3).initialize()\n    this.setState(prevState => ({...prevState}))\n  }\n\n  handleAddKYC = async () => {\n    await this.service.addAddress(this.props.address, this.state.kycAddress)\n  }\n\n  handleInputChange = (event) => {\n    this.setState({kycAddress: event.target.value})\n  }\n\n  render() {\n    return (\n      <div className=\"kyc\">\n        <h2>KYC whitelisting</h2>\n        Address to allow: <input type=\"text\" name=\"kycAddress\" onChange={this.handleInputChange} value={this.state.kycAddress}></input>\n        <button type=\"button\" onClick={this.handleAddKYC}>Add to whitelist</button>\n      </div>\n    )\n  }\n}","import MatchaTokenContract from \"../contracts/MatchaToken.json\";\n\nexport class MatchaTokenService {\n\n  constructor(web3) {\n    this.web3 = web3\n  }\n\n  initialize = async () => {\n    this.accounts = await this.web3.eth.getAccounts()\n    this.networkId = await this.web3.eth.net.getId()\n    this.contractInstance = new this.web3.eth.Contract(\n      MatchaTokenContract.abi,\n      MatchaTokenContract.networks[this.networkId] && MatchaTokenContract.networks[this.networkId].address\n    )\n    return this\n  }\n\n  getMoneyBalance = async (userAccount) => {\n    console.log(`Getting money balance for ${userAccount} ...`)\n\n    const balance = await this.web3.eth.getBalance(userAccount)\n    const result = this.web3.utils.fromWei(balance, \"ether\")\n\n    console.log(`Getting money balance for ${userAccount} = ${result}`)\n    return result\n  }\n\n  getTokenBalance = async (userAccount) => {\n    console.log(`Getting token balance for ${userAccount} ...`)\n\n    const result = await this.contractInstance.methods\n      .balanceOf(userAccount)\n      .call()\n\n    console.log(`Getting token balance for ${userAccount} = ${result}`)\n    return result // read is free\n  }\n\n  getTotalTokenSupply = async() => {\n    console.log(`Getting getTotalTokenSupply ...`)\n\n    const result = await this.contractInstance.methods\n      .totalSupply()\n      .call()\n\n    console.log(`Getting getTotalTokenSupply = ${result}`)\n    return result\n  }\n\n  subscribeTokenTransferEvent = (userAccount, onTransfer) => {\n    this.contractInstance.events\n      .Transfer({to: userAccount})\n      .on('data', async() => await onTransfer())\n  }\n\n}","import React, { Component } from \"react\"\nimport { MatchaTokenService } from \"../service/matcha-token.service\"\n\nexport class AccountDetailsComponent extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      address: '',\n      balanceMoney: 0,\n      balanceToken: 0,\n    }\n  }\n\n  componentDidMount = async () => {\n    this.service = await new MatchaTokenService(this.props.web3).initialize()\n    this.setState(prevState => ({...prevState, address: this.props.address}), async() => {\n      await this.getTokenBalance()\n      await this.getMoneyBalance()\n    })\n    this.subscribeTransferEvents()\n  }\n\n  subscribeTransferEvents = () => {\n    this.service.subscribeTokenTransferEvent(this.state.address, async() => {\n      await this.getTokenBalance()\n      await this.getMoneyBalance()\n    })\n  }\n\n  getTokenBalance = async () => {\n    const balanceToken = await this.service.getTokenBalance(this.state.address)\n    this.setState({balanceToken})\n  }\n\n  getMoneyBalance = async () => {\n    const balanceMoney = await this.service.getMoneyBalance(this.state.address)\n    this.setState({balanceMoney})\n  }\n\n  render() {\n    return (\n      <div className=\"account-details\">\n        <h2>Account details</h2>\n        <p>Your address: {this.state.address}</p>\n        <p>Token balance [JMT]: {this.state.balanceToken}</p>\n        <p>Money balance [ETH]: {this.state.balanceMoney}</p>\n      </div>\n    )\n  }\n}","import MatchaTokenSaleContract from \"../contracts/MatchaTokenSale.json\";\n\nexport class MatchaTokenSaleService {\n\n  constructor(web3) {\n    this.web3 = web3\n  }\n\n  initialize = async () => {\n    this.accounts = await this.web3.eth.getAccounts()\n    this.networkId = await this.web3.eth.net.getId()\n    this.contractInstance = new this.web3.eth.Contract(\n      MatchaTokenSaleContract.abi,\n      MatchaTokenSaleContract.networks[this.networkId] && MatchaTokenSaleContract.networks[this.networkId].address\n    )\n\n    return this\n  }\n\n  getAddress = () => {\n    return MatchaTokenSaleContract.networks[this.networkId].address\n  }\n\n  buyTokens = async(userAccount) => {\n    await this.contractInstance.methods\n      .buyTokens(userAccount)\n      .send({\n        from: userAccount,\n        value: this.web3.utils.toWei(\"1\", \"wei\")\n      })\n  }\n\n  getWalletAddres = async () => {\n    return await this.contractInstance.methods\n      .wallet()\n      .call() // read is free\n  }\n\n  getWalletMoneyBalance = async () => {\n    console.log(`Getting token sale balance ...`)\n\n    const walletAddress = await this.getWalletAddres()\n    const balance = await this.web3.eth.getBalance(walletAddress)\n    const result = this.web3.utils.fromWei(balance, \"ether\")\n\n    console.log(`Getting token sale balance  = ${result}`)\n    return result\n  }\n\n}","import React, { Component } from \"react\"\nimport { MatchaTokenSaleService } from \"../service/matcha-token-sale.service\"\nimport { MatchaTokenService } from \"../service/matcha-token.service\"\n\nexport class TokenSaleDetailsComponent extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      balanceWallet: 0,\n      balanceToken: 0,\n      address: '0x15...',\n      addressWallet: '0x16'\n    }\n  }\n\n  componentDidMount = async () => {\n    this.service = await new MatchaTokenSaleService(this.props.web3).initialize()\n    this.serviceToken = await new MatchaTokenService(this.props.web3).initialize()\n    this.setState(prevState => ({...prevState, address: this.service.getAddress()}),\n      async() => {\n        await this.getWalletAddress()\n        await this.getTokenTotalSupply()\n        await this.getWalletBalance()\n      }\n    )\n    this.subscribeTransferEvents(this.props.userAddress)\n  }\n\n  subscribeTransferEvents = (userAddress) => {\n    this.serviceToken.subscribeTokenTransferEvent(userAddress, async() => {\n      await this.getTokenTotalSupply()\n      await this.getWalletBalance()\n    })\n  }\n\n  getTokenTotalSupply = async () => {\n    const balanceToken = await this.serviceToken.getTotalTokenSupply()\n    this.setState({balanceToken})\n  }\n\n  getWalletBalance = async () => {\n    const balanceWallet = await this.service.getWalletMoneyBalance()\n    this.setState({balanceWallet})\n  }\n\n  getWalletAddress = async () => {\n    const addressWallet = await this.service.getWalletAddres()\n    this.setState({addressWallet})\n  }\n\n  render() {\n    return (\n      <div className=\"account-details\">\n        <h2>Token sale details</h2>\n        <p>Address: {this.state.address}</p>\n        <p>Wallet address: {this.state.addressWallet}</p>\n        <p>Token Balance [JMT]: {this.state.balanceToken}</p>\n        <p>Wallet money balance [ETH]: {this.state.balanceWallet}</p>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\"\nimport { MatchaTokenSaleService } from \"../service/matcha-token-sale.service\"\n\nexport class TokenBuyComponent extends Component {\n\n  constructor(props) {\n    super(props)\n  }\n\n  componentDidMount = async () => {\n    this.service = await new MatchaTokenSaleService(this.props.web3).initialize()\n  }\n\n  handleBuyTokens = async() => {\n    this.service.buyTokens(this.props.address)\n  }\n\n  render() {\n    return (\n      <div className=\"token-buy\">\n        <p>\n          <button type=\"button\" onClick={this.handleBuyTokens}>Buy single</button>\n        </p>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\nimport { KycComponent } from './components/kyc.component'\nimport { AccountDetailsComponent } from './components/account-details.component'\nimport { TokenSaleDetailsComponent } from './components/token-sale-details.component'\nimport { TokenBuyComponent } from './components/token-buy.component'\n\nclass App extends Component {\n\n  state = { loaded: false}\n\n  componentDidMount = async () => {\n    try {\n      this.web3 = await getWeb3()\n      this.userAddress = (await this.web3.eth.getAccounts())[0]\n      this.setState({loaded: true})\n    } catch (error) {\n      alert(`Failed to load web3, accounts, or contract. Check console for details.`,)\n      console.error(error)\n    }\n  }\n\n  render() {\n    if (!this.state.loaded) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"matcha-token-sale-app\">\n        <h1>Matcha open sale !</h1>\n        <KycComponent web3={this.web3} address={this.userAddress} />\n        <TokenBuyComponent web3={this.web3} address={this.userAddress} />\n        <TokenSaleDetailsComponent web3={this.web3} userAddress={this.userAddress} />\n        <AccountDetailsComponent web3={this.web3} address={this.userAddress} />\n      </div>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}